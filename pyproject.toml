[project]
name = "poltergeist"
version = "0.0.0"
description = "Rust-like error handling in Python, with type-safety in mind."
authors = [{ name = "Alexander Malyga", email = "alexander@malyga.io" }]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.10"
dependencies = []
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "Topic :: Software Development",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Scientific/Engineering"
]

[project.urls]
Homepage = "https://github.com/alexandermalyga/poltergeist"
Repository = "https://github.com/alexandermalyga/poltergeist"

[dependency-groups]
dev = [
  "mypy>=1.16.1",
  "ruff>=0.12.0",
  "pytest>=8.4.1",
  "pytest-mypy-plugins>=3.2.0",
  "pytest-cov>=6.2.1",
  "pytest-asyncio>=1.0.0",
  "poethepoet>=0.35.0"
]

[tool.coverage.report]
exclude_lines = ["pragma: not covered", "@overload"]

[tool.mypy]
show_error_codes = true
strict = true
warn_unused_configs = true

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.ruff]
fix = true
line-length = 100
unsafe-fixes = true

[tool.ruff.format]
docstring-code-format = true
quote-style = "double"

[tool.ruff.lint]
ignore = [
  "D203",  # one-blank-line-before-class (conflicts with D211)
  "D213",  # multi-line-docstring-summary-second-line (conflicts with D212)
  "COM812" # missing-trailing-comma (conflicts with formatter)
]
select = ["ALL"]

[tool.ruff.lint.isort]
force-single-line = true
from-first = false
length-sort-straight = true
lines-after-imports = 2
lines-between-types = 1
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"poltergeist/result.py" = [
  "D105", # Missing docstring in magic method
  "D107"  # Missing docstring in __init__
]
"test_*.py" = [
  "D103",   # Missing docstring in public function
  "INP001", # File is part of an implicit namespace package
  "S101"    # Use of assert detected
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.poe]

[tool.poe.tasks.format]
help = "Run formatters"
sequence = [{ shell = "ruff format .", help = "Run code formatter" }]

[tool.poe.tasks.lint]
help = "Run linters"
sequence = [
  { shell = "mypy -p poltergeist", help = "Run types linter" },
  { shell = "ruff check .", help = "Run code linter" }
]

[tool.poe.tasks.test]
help = "Run tests"
shell = "uv run pytest -vv --cov=poltergeist tests"
